[{"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\index.js":"1","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\reportWebVitals.js":"2","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\App.js":"3","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\constants\\routes\\routes.js":"4","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\secPage\\secPage.js":"5","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\firstPage\\firstPage.js":"6","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\constants\\services\\services.js":"7","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\createPage\\createPage.js":"8","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\user\\user.js":"9","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\updatePage\\updatePage.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":994,"mtime":1610571093060,"results":"14","hashOfConfig":"12"},{"size":434,"mtime":1610571165623,"results":"15","hashOfConfig":"12"},{"size":3132,"mtime":1610571119122,"results":"16","hashOfConfig":"12"},{"size":460,"mtime":1610313371278,"results":"17","hashOfConfig":"12"},{"size":606,"mtime":1610571613233,"results":"18","hashOfConfig":"12"},{"size":3279,"mtime":1610568084851,"results":"19","hashOfConfig":"12"},{"size":1352,"mtime":1610552071596,"results":"20","hashOfConfig":"12"},{"size":2864,"mtime":1610572548128,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1lmg2br",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\index.js",[],["47","48"],"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\reportWebVitals.js",[],"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\App.js",[],"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\constants\\routes\\routes.js",[],"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\secPage\\secPage.js",["49"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { generateGetOneUserRoute, genereteUpdateUserRoute, getCreateUserUrl, getOneUserUrl } from '../../constants/routes/routes';\r\nimport { deleteUser, getAllUsers, updateStatus } from '../../constants/services/services';\r\n\r\nconst SecPage = () => {\r\n\r\n    const[users, setUser] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, []);\r\n\r\n    const getData =async () => {\r\n        try {\r\n        const {data} = await getAllUsers();\r\n        setUser(data);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const statusHandler = async (id, status) => {\r\n        try {\r\n        await updateStatus(id, {status: !status})\r\n        await getData()\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const createHandler = () => {\r\n        history.push(getCreateUserUrl());\r\n    }\r\n\r\n    const deleteHandler =async (id) => {\r\n        try{\r\n            await deleteUser(id);\r\n            await getData();\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const oneUserHandler = (id) => {\r\n        history.push(generateGetOneUserRoute(id));\r\n    }\r\n\r\n    const updateUserHandler = (id) => {\r\n        history.push(genereteUpdateUserRoute(id));\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Address</th>\r\n                        <th>City</th>\r\n                        <th>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    \r\n                        {users.map((user) => (\r\n                            <tr key={user.firstName + user.address} >\r\n                                <td onClick={()=>oneUserHandler(user.id)}>{user.firstName}</td>\r\n                                <td>{user.lastName}</td>\r\n                                <td>{user.address} </td>\r\n                                <td>{user.city}</td>\r\n                                {user.status === true ? (<td>Active</td>) : (<td>Not Activ</td>)}\r\n                                <div>\r\n                                    <td>\r\n                                        <button onClick={() =>statusHandler(user.id, user.status)}>Change Status</button>\r\n                                        <button onClick={() =>deleteHandler(user.id)}>Delete User</button>\r\n                                        <button onClick={() =>updateUserHandler(user.id)}>Update User</button>\r\n                                    </td>\r\n                                </div>\r\n                                \r\n                            </tr>\r\n                            \r\n                        ))}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                <button onClick={createHandler}>Create new User</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SecPage;","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\firstPage\\firstPage.js",[],"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\constants\\services\\services.js",[],"C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\createPage\\createPage.js",["50"],"import { useFormik,Field } from 'formik';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { getUsersPageUrl } from '../../constants/routes/routes';\r\nimport { createUser } from '../../constants/services/services';\r\n\r\nconst CreatePage = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            address: \"\",\r\n            city: \"\",\r\n            status: false\r\n          }\r\n    })\r\n\r\n    const createUserHandler =async (e) => {\r\n        e.preventDefault();\r\n        console.log(formik.values);\r\n        try{\r\n            await createUser(formik.values);\r\n            history.push(getUsersPageUrl());\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n        //createUser(formik.values);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form action=\"#\">\r\n                <div >\r\n                <label  htmlFor=\"firstName\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    name=\"firstName\"\r\n                    id=\"firstName\"\r\n                    {...formik.getFieldProps(\"firstName\")}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <label htmlFor=\"lastName\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    name=\"lastName\"\r\n                    id=\"lastName\"\r\n                    {...formik.getFieldProps(\"lastName\")}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <label htmlFor=\"address\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Address\"\r\n                    name=\"address\"\r\n                    id=\"address\"\r\n                    {...formik.getFieldProps(\"address\")}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <label htmlFor=\"city\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"city\"\r\n                    name=\"city\"\r\n                    id=\"city\"\r\n                    {...formik.getFieldProps(\"city\")}\r\n                />\r\n                </div>\r\n\r\n                {/* <div>\r\n                <label htmlFor=\"status\">Status</label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    placeholder=\"Yes\"\r\n                    name=\"status\"\r\n                    id=\"status\"\r\n                    value={true}\r\n                    {...formik.getFieldProps(\"status\")}\r\n                />\r\n                <input\r\n                    type=\"checkbox\"\r\n                    placeholder=\"No\"\r\n                    name=\"status\"\r\n                    id=\"status\"\r\n                    value={false}\r\n                    {...formik.getFieldProps(\"status\")}\r\n                />\r\n                </div> */}\r\n                <label> Active\r\n                    <input type=\"checkbox\" name=\"status\" {...formik.getFieldProps(\"status\")}/>\r\n                </label>\r\n                <button onClick={createUserHandler}>Create</button>\r\n          </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePage;","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\user\\user.js",["51"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useRouteMatch } from 'react-router';\r\nimport { getUsersPageUrl } from '../../constants/routes/routes';\r\nimport { getOneUser } from '../../constants/services/services';\r\n\r\nconst User = () => {\r\n\r\n    const [user, setUser] = useState(null);\r\n    const match = useRouteMatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getUserData();\r\n    },[])\r\n\r\n    const getUserData = async() => {\r\n        const {id} = match.params; \r\n        try{\r\n            const {data} = await getOneUser(id);\r\n            console.log(data)\r\n            setUser(data);\r\n            console.log(user)\r\n        }catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n    \r\n    const backToBikesHandler = () => {\r\n        history.push(getUsersPageUrl());\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {user && (\r\n            <div>\r\n            <div>First Name :{user.firstName}</div>\r\n            <div>Last Name : {user.lastName}</div>\r\n            <div>Address :{user.address}</div>\r\n            <div>City : {user.city}</div>\r\n            <div>Status : {user.status === true ? ('Active') : ('Not Activ')}</div>\r\n            </div>\r\n        )}\r\n\r\n            <button onClick={() => backToBikesHandler()}>Back</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","C:\\Gidra\\Projects\\UserAdminApp\\my-admin-user\\src\\view\\updatePage\\updatePage.js",["52","53"],"import { useFormik } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useRouteMatch } from 'react-router';\r\nimport { getUsersPageUrl } from '../../constants/routes/routes';\r\nimport { getOneUser, updateStatus } from '../../constants/services/services';\r\n\r\nconst UpdatePage = () => {\r\n\r\n    const match = useRouteMatch();\r\n    const history = useHistory();\r\n    const [user, setUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getUserData();\r\n    },[]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: \"gidra\",\r\n            lastName: \"\",\r\n            address: \"\",\r\n            city: \"\"\r\n          }\r\n    })\r\n\r\n    const getUserData = async() => {\r\n        const {id} = match.params; \r\n        try{\r\n            const {data} = await getOneUser(id);\r\n            setUser(data);\r\n        }catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    const updateUserHandler = async(e) => {\r\n        e.preventDefault();\r\n        const {id} = match.params;\r\n        try{\r\n            await updateStatus(id,formik.values);\r\n            history.push(getUsersPageUrl())\r\n        }catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form action=\"#\">\r\n                <div >\r\n                <label  htmlFor=\"firstName\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"First Name\"\r\n                    name=\"firstName\"\r\n                    id=\"firstName\"\r\n                    value=\"firstName\"\r\n                    {...formik.getFieldProps(\"firstName\")}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <label htmlFor=\"lastName\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                    name=\"lastName\"\r\n                    id=\"lastName\"\r\n                    {...formik.getFieldProps(\"lastName\")}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <label htmlFor=\"address\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Address\"\r\n                    name=\"address\"\r\n                    id=\"address\"\r\n                    {...formik.getFieldProps(\"address\")}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <label htmlFor=\"city\"></label>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"city\"\r\n                    name=\"city\"\r\n                    id=\"city\"\r\n                    {...formik.getFieldProps(\"city\")}\r\n                />\r\n                </div>\r\n                <button onClick={updateUserHandler}>Update</button>\r\n          </form>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdatePage;",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":3,"column":78,"nodeType":"60","messageId":"61","endLine":3,"endColumn":91},{"ruleId":"58","severity":1,"message":"62","line":1,"column":20,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"63","severity":1,"message":"64","line":14,"column":7,"nodeType":"65","endLine":14,"endColumn":9,"suggestions":"66"},{"ruleId":"58","severity":1,"message":"67","line":11,"column":12,"nodeType":"60","messageId":"61","endLine":11,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":15,"column":7,"nodeType":"65","endLine":15,"endColumn":9,"suggestions":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'getOneUserUrl' is defined but never used.","Identifier","unusedVar","'Field' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["71"],"'user' is assigned a value but never used.",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"73","fix":"75"},"Update the dependencies array to be: [getUserData]",{"range":"76","text":"77"},{"range":"78","text":"77"},[440,442],"[getUserData]",[497,499]]